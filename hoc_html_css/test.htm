<!DOCTYPE html>
<!-- Website - www.codingnepalweb.com -->
<html lang="en" dir="ltr">
  <head>
    <meta charset="utf-8" />
    <title>Infinite Card Slider JavaScript | CodingNepal</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link
      rel="stylesheet"
      href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.3.0/css/all.min.css"
    />
    <style>
      .wrapper {
        max-width: 1100px;
        width: 100%;
        position: relative;
      }
      .wrapper i {
        top: 50%;
        height: 50px;
        width: 50px;
        cursor: pointer;
        font-size: 1.25rem;
        position: absolute;
        text-align: center;
        line-height: 50px;
        transform: translateY(-50%);
        transition: transform 0.1s linear;
      }
      .wrapper i:active {
        transform: translateY(-50%) scale(0.85);
      }
      .wrapper i:first-child {
        left: -22px;
      }
      .wrapper i:last-child {
        right: -22px;
      }
      .wrapper .carousel {
        display: grid;
        grid-auto-flow: column;
        grid-auto-columns: calc((100% / 5) - 12px);
        overflow-x: auto;
        scroll-snap-type: x mandatory;
        gap: 16px;
        border-radius: 8px;
        scroll-behavior: smooth;
        scrollbar-width: none;
      }
      .carousel::-webkit-scrollbar {
        display: none;
      }
      .carousel.no-transition {
        scroll-behavior: auto;
      }
      .carousel.dragging {
        scroll-snap-type: none;
        scroll-behavior: auto;
      }
      .carousel.dragging .card {
        cursor: grab;
        user-select: none;
      }
      .carousel :where(.card, .img) {
        display: flex;
        justify-content: center;
        align-items: center;
      }
      .carousel .card {
        scroll-snap-align: start;
        list-style: none;
        cursor: pointer;
        padding-bottom: 15px;
        flex-direction: column;
      }
      .card .img img {
        object-fit: cover;
        width: 15rem;
        height: auto;
      }
      .carousel .card h2 {
        font-weight: 500;
        font-size: 1.56rem;
        margin: 30px 0 5px;
      }
      .carousel .card span {
        color: #6a6d78;
        font-size: 1.31rem;
      }

      @media screen and (max-width: 900px) {
        .wrapper .carousel {
          grid-auto-columns: calc((100% / 2) - 9px);
        }
      }

      @media screen and (max-width: 600px) {
        .wrapper .carousel {
          grid-auto-columns: 100%;
        }
      }
    </style>
  </head>
  <body>
    <div class="wrapper">
      <i id="left" class="fa-solid fa-angle-left"></i>
      <ul class="carousel">
        <li class="card">
          <div class="img">
            <img src="assets/img/clients-img-5.png" alt="img" draggable="false" />
          </div>
        </li>
        <li class="card">
          <div class="img">
            <img src="assets/img/clients-img-5.png" alt="img" draggable="false" />
          </div>
        </li>
        <li class="card">
          <div class="img">
            <img src="assets/img/clients-img-5.png" alt="img" draggable="false" />
          </div>
        </li>
        <li class="card">
          <div class="img">
            <img src="assets/img/clients-img-5.png" alt="img" draggable="false" />
          </div>
        </li>
        <li class="card">
          <div class="img">
            <img src="assets/img/clients-img-5.png" alt="img" draggable="false" />
          </div>
        </li>
        <li class="card">
          <div class="img">
            <img src="assets/img/clients-img-5.png" alt="img" draggable="false" />
          </div>
        </li>
      </ul>
      <i id="right" class="fa-solid fa-angle-right"></i>
    </div>
    <script>
      const wrapper = document.querySelector(".wrapper");
      const carousel = document.querySelector(".carousel");
      const firstCardWidth = carousel.querySelector(".card").offsetWidth;
      const arrowBtns = document.querySelectorAll(".wrapper i");
      const carouselChildrens = [...carousel.children];

      let isDragging = false,
        isAutoPlay = true,
        startX,
        startScrollLeft,
        timeoutId;

      // Get the number of cards that can fit in the carousel at once
      let cardPerView = Math.round(carousel.offsetWidth / firstCardWidth);

      // Insert copies of the last few cards to beginning of carousel for infinite scrolling
      carouselChildrens
        .slice(-cardPerView)
        .reverse()
        .forEach((card) => {
          carousel.insertAdjacentHTML("afterbegin", card.outerHTML);
        });

      // Insert copies of the first few cards to end of carousel for infinite scrolling
      carouselChildrens.slice(0, cardPerView).forEach((card) => {
        carousel.insertAdjacentHTML("beforeend", card.outerHTML);
      });

      // Scroll the carousel at appropriate postition to hide first few duplicate cards on Firefox
      carousel.classList.add("no-transition");
      carousel.scrollLeft = carousel.offsetWidth;
      carousel.classList.remove("no-transition");

      // Add event listeners for the arrow buttons to scroll the carousel left and right
      arrowBtns.forEach((btn) => {
        btn.addEventListener("click", () => {
          carousel.scrollLeft +=
            btn.id == "left" ? -firstCardWidth : firstCardWidth;
        });
      });

      const dragStart = (e) => {
        isDragging = true;
        carousel.classList.add("dragging");
        // Records the initial cursor and scroll position of the carousel
        startX = e.pageX;
        startScrollLeft = carousel.scrollLeft;
      };

      const dragging = (e) => {
        if (!isDragging) return; // if isDragging is false return from here
        // Updates the scroll position of the carousel based on the cursor movement
        carousel.scrollLeft = startScrollLeft - (e.pageX - startX);
      };

      const dragStop = () => {
        isDragging = false;
        carousel.classList.remove("dragging");
      };

      const infiniteScroll = () => {
        // If the carousel is at the beginning, scroll to the end
        if (carousel.scrollLeft === 0) {
          carousel.classList.add("no-transition");
          carousel.scrollLeft = carousel.scrollWidth - 2 * carousel.offsetWidth;
          carousel.classList.remove("no-transition");
        }
        // If the carousel is at the end, scroll to the beginning
        else if (
          Math.ceil(carousel.scrollLeft) ===
          carousel.scrollWidth - carousel.offsetWidth
        ) {
          carousel.classList.add("no-transition");
          carousel.scrollLeft = carousel.offsetWidth;
          carousel.classList.remove("no-transition");
        }

        // Clear existing timeout & start autoplay if mouse is not hovering over carousel
        clearTimeout(timeoutId);
        if (!wrapper.matches(":hover")) autoPlay();
      };

      const autoPlay = () => {
        if (window.innerWidth < 800 || !isAutoPlay) return; // Return if window is smaller than 800 or isAutoPlay is false
        // Autoplay the carousel after every 2500 ms
        timeoutId = setTimeout(
          () => (carousel.scrollLeft += firstCardWidth),
          2500
        );
      };
      autoPlay();

      carousel.addEventListener("mousedown", dragStart);
      carousel.addEventListener("mousemove", dragging);
      document.addEventListener("mouseup", dragStop);
      carousel.addEventListener("scroll", infiniteScroll);
      wrapper.addEventListener("mouseenter", () => clearTimeout(timeoutId));
      wrapper.addEventListener("mouseleave", autoPlay);
    </script>
  </body>
</html>
